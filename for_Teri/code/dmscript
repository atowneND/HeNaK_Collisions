#!/bin/bash 

###############
#FUNCTION DEFS#
###############

###############
#  FUNCTIONS  #
###############
# weightedanglehist - - - - - generate sum of sigma vs angle histogram
# weighteddmhist  - - - - - - generate sum of sigma vs dm histogram
# eststd  - - - - - - - - - - find standard deviation
# normalize_dtheta  - - - - - QM normalization for plotting and comparing QM/SC
# gaussfilter - - - - - - - - passes binned raw data through gauss filter
# calcdtheta  - - - - - - - - calculate delta theta from m, mp, j, jp
###############

###############
#    NOTES    #
###############
# raw data is in $datadir/jmp_j#_jp#_dj#.dat
# semiclassical data is in $scdatadir/th_j#_jp#_dj#.dat
# temporary file for plotting: $gnuplot_input_file = plotme
#   - deleted at beginning of script and at the end of functions that use it
###############

###############
weightedanglehist(){
    # initialization
    dj=$(($jp-$j))
    qmfile=$qmdatadir/qmth_j$j\_jp$jp\_dj$dj\.dat
    data_for_plotting_file=thplotfile$(date +'%Y_%m_%d_%H%M')
    scfile=$scdatadir/th_j$j\_jp$jp\_dj$dj\.dat
    sorted_data_file=tmp_sorted_data_$(date +'%Y_%m_%d_%H%M')
    
    # cleanup
    rm $sorted_data_file $data_for_plotting_file $gnuplot_input_file 2>/dev/null

    # get semiclassical data
    ./dthetascquad $srcdir $scfile $j $jp >/dev/null


    # binning
    # round delta-theta to nearest int, say 0=-0, sum cross sections for each
    # delta-theta bin
    awk '{printf("%.0f %f\n",$3/'$wbin',$4)}' $qmfile | awk '{if($1==-0) {print 0,$2}\
        else {print $1,$2}}' | awk '{a[$1]+=$2} END {for (i in a) print i*'$wbin',a[i]}'\
           | sed '/#/d' | sort -k 1 -n >$sorted_data_file

    # Gaussian filter and normalization
    tmpfile=tmpfile$(date +'%Y_%m_%d_%H%M')
    rm $tmpfile 2>/dev/null
    gaussfilter $sorted_data_file $tmpfile
    normalize_dtheta $tmpfile $data_for_plotting_file
    rm $tmpfile 2>/dev/null

    # statistics
    std=$(eststd $sorted_data_file)
    echo $jb $dj $std >>$stdfile

    # plot settings
    fonttype=Helvetica
    fontsize=10
    plotlw=1
    borderlw=1
    xmin=-50
    xmax=$((-$xmin))
    qmcolor=red
    sccolor=blue

    # plotting
    echo "set terminal postscript color eps enhanced font '$fonttype,$fontsize'
    set border lw $borderlw
    set samples 10000

    set xlabel '{/Symbol D}{/Symbol q}'
    set xrange [$xmin:$xmax]
    set ylabel 'sum of {/Symbol s}s'
    set title '$atom: j=$j, j{\302}=$jp'

    plot '$data_for_plotting_file' u 1:2 w lines lt 2 lw $plotlw lc rgb '$qmcolor' title 'QM'
    replot '$scfile' w lines smooth csplines lt 1 lw $plotlw lc rgb '$sccolor' title 'SC'

    set output '$output_plot_file'
    replot">>$gnuplot_input_file

    gnuplot <$gnuplot_input_file >/dev/null

    # cleanup
    rm $sorted_data_file $data_for_plotting_file $gnuplot_input_file 2>/dev/null
}
###############

###############
weighteddmhist(){
    dj=$(($jp-$j))
    qmfile=$qmdatadir/qmth_j$j\_jp$jp\_dj$dj\.dat
    normalized_data_for_plotting_file=thplotfile$(date +'%Y_%m_%d_%H%M')
    tmpfile=tmpfile$(date +'%Y_%m_%d_%H%M')
    rm $tmpfile $normalized_data_for_plotting $gnuplot_input_file 2>/dev/null

    # for all unique delta-m's (m'-m)
    for dm in $(awk '{print $2-$1}' $qmfile|awk '!seen[$0]++'); do
        # add cross sections for all duplicate delta-ms
        ndm=$(awk '($2-$1)=='$dm' {sum=sum+$4} END {print sum}' $qmfile)
        echo $dm $ndm >>$tmpfile
    done

    # normalization
    normalize_dtheta $tmpfile $normalized_data_for_plotting_file

    # plotting
    echo "set terminal postscript eps enhanced
    set xlabel '{/Symbol D}m'
    set ylabel 'sum of {/Symbol s}s'
    set title '$atom: j=$j, jp=$jp'
    plot '$normalized_data_for_plotting' u 1:2 with impulse
    replot '$normalized_data_for_plotting' u 1:2 title ''
    set output '$output_plot_file'
    replot">>$gnuplot_input_file

    gnuplot <$gnuplot_input_file >/dev/null 2>&1

    # cleanup
    rm $tmpfile $normalized_data_for_plotting_file $gnuplot_input_file 2>/dev/null
}
###############

###############
eststd(){
    # get datafile
    raw_data_file=$1
    tmpfile=tmp_j$j\jp$jp$(date +'%Y_%m_%d_%H%M').dat
    positive_raw_data=j$j\jp$jp\sorted.dat

    # sort data
    cat $raw_data_file | sed '/#/d' >$tmpfile

    # print out all angles greater than or equal to 0
    awk '$1==0 {print $1,$2/2}' $tmpfile >$positive_raw_data
    awk '$1>0 {print $1,$2}' $tmpfile >>$positive_raw_data
    totsum=$(awk '{sum=sum+$2}END{print sum}' $tmpfile) # sum over all cross sections

    # compute standard devation - sum of half the data points < 1/3 (67% between -std and +std)
    std=$(awk 'BEGIN {sum=0} {if(sum/'$totsum'<1/3){sum=sum+$2;thispoint=$1}}\
        END {print thispoint}' $positive_raw_data)

    # cleanup
    rm $tmpfile $positive_raw_data 2>/dev/null

    # return standard deviation
    echo $std
}
###############

###############
normalize_dtheta(){
    # initialization
    original_data=$1
    normalized_data=$2
    rm $normalized_data 2>/dev/null

    # normalize and write data to output file
    totsum=$(awk '{sum=sum+$2}END{print sum}' $original_data)
    awk '{print $1,$2/('$wbin'*'$totsum'),$2}' $original_data >$normalized_data
}
###############

###############
gaussfilter(){
    original_data=$1
    smooth_data=$2
    rm $smooth_data 2>/dev/null

    # set constants
    pi=3.141592654
    gam=$wbin
    gam=1

    th=-180
    checkrange=1

    # compute sum for each point and write to output file
    while [ $checkrange -eq 1 ] ; do
        awk 'BEGIN {sum=0} {sum=sum+$2*exp(-((('$th'-$1)/'$gam')^2))}END\
            {print '$th',sum/('$gam'*sqrt('$pi'))}' $original_data >>$smooth_data

        th=$(awk 'BEGIN {print '$th'+'$wbin'}')
        checkrange=$(awk 'BEGIN {if ('$th'<=180) {print 1} else {print 0}}')
    done
}
###############

###############
calcdtheta(){
    # get inputs/initialization
    j=$1
    jp=$2
    datadir=$3
    qmdatadir=$4
    dj=$(($jp-$j))
    indata=$datadir/jmp_j$j\_jp$jp\_dj$dj\.dat
    datoutfile=$qmdatadir/qmth_j$j\_jp$jp\_dj$dj\.dat

    echo "#m mp dtheta sigma theta theta_prime">$datoutfile

    # compute delta-theta
    cat $indata | sed '/#/d' | awk '{jex=$1/sqrt('$jp'*('$jp'+1)); jpex=$2/sqrt('$j'*('$j'+1));\
        t1ex=atan2(sqrt(1-jex*jex),jex); t2ex=atan2(sqrt(1-jpex*jpex),jpex);\
        t1appdeg=t1app*180/3.141592654;t2appdeg=t2app*180/3.141592654;t1exdeg=t1ex*180/3.141592654;t2exdeg=t2ex*180/3.141592654;\
        print $1,$2,t2exdeg-t1exdeg,$3,t1exdeg,t2exdeg}' >>$datoutfile
}
###############

###############
plot_m_mprime(){
    rm $gnuplot_input_file 2>/dev/null
    j=$1
    jp=$2
    dj=$(awk 'BEGIN {x='$j'-'$jp'; print sqrt(x*x)}')
    qmdatadir=$3
    scdatadir=$4

    qmfile=$qmdatadir/qmth_j$j\_jp$jp\_dj$dj.dat
    scfile=$scdatadir/th_j$j\_jp$jp\_dj$dj.dat
    output_plot=$outputdir/m_mprime/m_mp_j$j\_jp$jp\_dj$dj.eps
    if [ "$(find $outputdir/m_mprime 2>/dev/null)" == "" ]; then
        mkdir $outputdir/m_mprime
    fi

    fonttype=Helvetica
    fontsize=30

    echo "#!/usr/local/gnuplot
    set terminal postscript color eps enhanced solid font '$fonttype,$fontsize'
    set samples 10000
    set xlabel 'm{\302}'
    set ylabel 'cross sections'
    set title 'distribution of m{/Symbol \256}m{\302}, for j=$j{/Symbol \256}j{\302}=$jp'
    " >$gnuplot_input_file

    # factors to multiply j' by to get m's to plot
    mlist=(-1 -0.5 0 0.5 1)
    for mfactor in ${mlist[*]}; do
        m=$(awk 'BEGIN {printf("%.0f",'$jp'*'$mfactor')}')
        if [ "$mfactor" = "${mlist[0]}" ]; then
            echo "plot '$qmfile' u 2:(\$1==$m?\$4:1/0) w lines smooth csplines title ''" >>$gnuplot_input_file
        else
            echo "replot '$qmfile' u 2:(\$1==$m?\$4:1/0) w lines smooth csplines title ''" >>$gnuplot_input_file
        fi

        read m_min max <<<$(awk '$1=='$m' {if ($4>max) {m_max=$2; max=$4}} END {print m_max,max}' $qmfile)

        echo "set label 'm=$m' at $m_min,$max+5 center" >>$gnuplot_input_file
    done

    echo "set output '$output_plot'
    replot" >>$gnuplot_input_file

    gnuplot -persistent <$gnuplot_input_file >/dev/null

    rm $gnuplot_input_file
}
###############

###############
#  MY SCRIPT  #
###############

# temporary files
# do not remove timestamp if you will want to run multiple instances of dmscript simultaneously
plotfile=plotme_$(date +'%Y_%m_%d_%H%M') 
gnuplot_input_file=plotme_$(date +'%Y_%m_%d_%H%M')
rm $gnuplot_input_file 2>/dev/null

# runtime parameters - loop over all these
djlist=(1 2 3 4 5 6 7 8 9 10)
jblist=(5 10 20 30 35)
atomlist=(He Ar)

# bin size for semiclassical and quantum models
wbin=0.5

# for naming convention: output directory = <prefix><atom>Hists
prefix=plot

# for metadata file to describe what was run
smoothfun="gaussian"
uniqchar="gaussian filter, normalized, ppt settings"

for atom in ${atomlist[*]}; do
    if [ "$atom" = "He" ]; then
        srcfile=Ep002mf5i-50b.blam
    elif [ "$atom" = "Ar" ]; then
        srcfile=Arp002-5i-40-384J-5.blam
    fi
    srcdir=$(pwd)/raw_data/$srcfile

    outputdir=$prefix$atom\Hists
    if [ "$(find $outputdir 2>/dev/null)" == "" ]; then
        mkdir $outputdir
    fi

    datadir=datfiles$atom
    qmdatadir=qmthetas$atom
    scdatadir=scthetas$atom
    stdfile=std$atom\stats
    echo "#jbar dj std">$stdfile

    if [ "$(find $qmdatadir 2>/dev/null)" == "" ]; then
        mkdir $qmdatadir
    fi
    if [ "$(find $scdatadir 2>/dev/null)" == "" ]; then
        mkdir $scdatadir
    fi

    echo "data file: "$srcfile"
    directory: "$outputdir"
    smoothing: "$smoothfun"
    characteristics: "$uniqchar"
    date: "$(date) > $outputdir/metadata

    echo $atom:
    for jb in ${jblist[*]}; do
        for dj in ${djlist[*]}; do
            if [ $(($dj%2)) -eq 0 ]; then #even
                jdiff=$(($dj/2))
                j=$(($jb-$jdiff))
                jp=$(($jb+$jdiff))
            else
                jdiff=$(($dj/2))
                j=$(($jb-$jdiff))
                jp=$(($jb+$jdiff+1))
            fi
            if [ $j -ne 0 ]; then
                echo calculating for jbar=$jb, dj=$dj...

                calcdtheta $j $jp $datadir $qmdatadir

                output_plot_file=$outputdir/$atom\_wth_j$j\jp$jp\_dj$dj\.eps
                weightedanglehist

                output_plot_file=$outputdir/$atom\_wdm_j$j\jp$jp\_dj$dj\.eps
                weighteddmhist

                plot_m_mprime $j $jp $qmdatadir $scdatadir
            fi
        done
    done
done

exit
