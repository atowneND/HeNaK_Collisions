#!/bin/bash

# USAGE: ./plotAll -w <working_directory> -d <blam_file> -a <atom> [-v]
# -w <working_directory>: directory where all output will be stored
# -d <blam_file>: raw data file *.blam
# -a <atom>: He or Ar
# -v: (like verbose) - use this flag the first time. if dqcalc and dq2theta
#     have already been run, do not use this flag to improve speed
#
# defaults: -w ./plotAll_output_<date> -d ../data/raw_data/Ep002mf5i-50b.blam -a He

# get inputs
args='getopt w:d:a:v $*'
workdir=""
origfile=""
atom=""
run_everything=0

for i; do
    case "$i" in
        -w) shift; workdir=$1; shift
            ;;
        -d) shift; origfile=$1; shift
            ;;
        -a) shift; atom=$1; shift
            ;;
        -v) shift; run_everything=1
    esac
done

# input validation for working directory
if [ "$workdir" = "" ] ; then
    workdir=plotAll_output_$(date +'%Y_%m_%d_%H%M')
    echo No target directory specified. Creating output directory: $workdir
    mkdir $workdir
else
    runprog=$(find . -name $workdir -nowarn)
    if [ "$runprog" != "./$workdir" ]; then
        echo Directory not found: creating directory $workdir
        mkdir $workdir
    fi
fi

# input validation for checking for subdirectories and creating them if necessary
if [ "$(find $workdir -name Blambdas -nowarn)" = "" ]; then
    mkdir $workdir/Blambdas
fi
if [ "$(find $workdir -name Blams -nowarn)" = "" ]; then
    mkdir $workdir/Blams
fi
if [ "$(find $workdir -name Bthetas -nowarn)" = "" ]; then
    mkdir $workdir/Bthetas
fi
if [ "$(find $workdir -name dtheta -nowarn)" = "" ]; then
    mkdir $workdir/dtheta
fi
if [ "$(find $workdir -name plots -nowarn)" = "" ]; then
    mkdir $workdir/plots
fi
if [ "$(find $workdir -name Stats -nowarn)" = "" ]; then
    mkdir $workdir/Stats
fi

# more input validation
if [ "$origfile" = "" ]; then
    echo Enter an input file:
    read origfile
    if [ "$origfile" = "" ]; then
        echo File must not be null. Exiting.
        exit
    fi
fi

if [ "$atom" = "" ]; then
    echo Which atom \(He or Ar\)?
    read atom
    if [ "$atom" = Helium ] || [ "$atom" = helium ]; then
        atom=He
    elif [ "$atom" = Argon ] || [ "$atom" = argon ]; then
        atom=Ar
    fi
    if [ "$atom" != He ] && [ "$atom" != Ar ]; then
        echo Atom must be He or Ar. Exiting
        exit
    fi
elif [ "$atom" = Helium ] || [ "$atom" = helium ]; then
    atom=He
elif [ "$atom" = Argon ] || [ "$atom" = argon ]; then
    atom=Ar
fi

dj=1
CTR=1
MAX=40
MAXdj=30
errfile=$workdir/errors.log
metafile=$workdir/metadata.txt
plotfile=$workdir/deleteme
iter_count=0

make
echo Writing to $workdir using $origfile

while [ $dj -le $MAXdj ]; do
    if [ $dj -lt 10 ]; then
        djstr=0$dj
    else
        djstr=$dj
    fi

    # set up output files
    # statistics file
    statdir=$workdir/Stats
    statfile=stats_dj$djstr\.dat
    echo \#j jp SCavg SCstd SCvar QMavg QMstd QMvar diffavg diffstd diffvar>$statdir/$statfile
    # dtheta file
    dthdir=$workdir/dtheta
    dthout=dtheta_dj$djstr\.dat
    echo j jp jbar dtheta discrete continuous Bmax\(a\) Bmax\(l\) appalpha> $dthdir/$dthout
    echo Running dj = $dj

    while [ $CTR -lt $(($MAX-$dj+1)) ]; do
        let iter_count=iter_count+1
        j=$CTR
        jp=$((CTR+$dj))

        # change so zeros are appended
        if [ $jp -lt 10 ]; then
            jpstr=0$jp
        else
            jpstr=$jp
        fi
        if [ $j -lt 10 ]; then
            jstr=0$j
        else
            jstr=$j
        fi

        # run dqcalc - file output has B-lambdas and dq coefficients
        # dqcalc is only run if the file does not already exist. To change
        # this, go to line <> and set flag to 1
        blamdir=$workdir/Blambdas
        blamdat=Blambda_$jstr\_$jpstr.dat
        runprog=$(find $blamdir -name $blamdat -nowarn)
        if [ "$runprog" != "$blamdir/$blamdat" ]; then
            ./dqcalc $origfile $blamdir/$blamdat $j $jp
        fi

        # only proceed if the files were successfully created
        runprog=$(find $blamdir -name $blamdat -nowarn)
        if [ "$runprog" != "$blamdir/$blamdat" ]; then
            echo Error running dqcalc on j=$j,jp=$jp. Proceeding to next dataset >>$errfile
        else
            # dq2theta
            bthdir=$workdir/Bthetas
            bthdat=Btheta_$jstr\_$jpstr\_dj$djstr\.dat
            normblams=Blam_$jstr\_$jpstr\_dj$djstr\.dat
            read alphamin Bmaxa <<<$(./dq2theta $blamdir/$blamdat $bthdir/$bthdat)
            normdir=$workdir/Blams

            # only proceed if the files were successfully created
            runprog=$(find $bthdir -name $bthdat -nowarn)
            runprog1=$(find . -name $normblams -nowarn -maxdepth 1)
            if [ "$runprog" != "$bthdir/$bthdat" ] || [ "$runprog1" != "./$normblams" ]; then
                echo Error running dq2theta on j=$j,jp=$jp. Proceeding to next dataset >>$errfile
            else
                mv $normblams $normdir/$normblams

                # get the first angle (for lambda = lambdaMIN)
                # column 3, line 2
                lmindeg=$(cat $normdir/$normblams|sed -n '2p'|awk '{print $3}')
                Bmaxl=$(cat $normdir/$normblams|sed -n '2p'|awk '{print $4}') # normalized

                # calculate difference in theta
                dtheta=$(awk "BEGIN {print $lmindeg-$alphamin}")
                jbar=$(awk "BEGIN {print ($j+$jp)/2}")

                # write to file
                appalpha=$(awk "BEGIN {print (180/3.1415926)*(sqrt($jp-$j)/($jbar+1/2))}")
                echo $j $jp $jbar $dtheta $lmindeg $alphamin $Bmaxa $Bmaxl $appalpha>> $dthdir/$dthout
                outdir=$workdir/plots
                outputfile=BPlots_$jstr\_$jpstr\_dj$djstr\.eps

                # stats
                read SCavg SCstd SCvar QMavg QMstd QMvar <<<$(./main.out $j $jp $workdir)
                echo $j $jp $SCavg $SCstd $SCvar $QMavg $QMstd $QMvar >>$errfile
                diffavg=$(awk 'function isnum(x){return(x==x+0)} BEGIN{if (isnum("$SCavg")&&isnum("$QMavg")) print "$SCavg"-"$QMavg";else print "0";}')
                diffstd=$(awk 'function isnum(x){return(x==x+0)} BEGIN{if (isnum("$SCstd")&&isnum("$QMstd")) print "$SCstd"-"$QMstd";else print "0";}')
                diffvar=$(awk 'function isnum(x){return(x==x+0)} BEGIN{if (isnum("$SCvar")&&isnum("$QMvar")) print "$SCvar"-"$QMvar";else print "0";}')
                echo $j $jp $SCavg $SCstd $SCvar $QMavg $QMstd $QMvar $diffavg $diffstd $diffvar >>$statdir/$statfile

                # plot it
                plotlw=6
                fonttype=Helvetica-Bold
                fontsize=30
                borderlw=3
                plotlw=1
                fonttype=Helvetica
                fontsize=''
                borderlw=1
                qmcolor=red
                sccolor=blue

                # to plot minimum alpha, uncomment "replot $alphamin..." (189)
                # to plot average values, uncomment "replot $SCavg..." (190) and "replot $QMavg..." (191)
                echo "#!/usr/local/gnuplot
                set samples 10000
                set term postscript eps color enhanced font '$fonttype,$fontsize'
                set border lw $borderlw

                plot '$normdir/$normblams' using 3:4 with impulse lt 2 lw $plotlw lc rgb '$qmcolor' title 'Quantum'
                replot '$bthdir/$bthdat' using 1:3 with lines smooth csplines lt 1 lw $plotlw lc rgb '$sccolor' title 'Semiclassical'

                set parametric
                set trange [0:$Bmaxa]
                set xrange [0:40]
                #replot $alphamin,t title '{/Symbol a}_min'
                #replot $SCavg,t title 'SC average'
                #replot $QMavg,t title 'QM average'
                set xlabel '{/Symbol a} (deg)'
                set ylabel 'B'
                set title \"$atom: j=$j, j{\302}=$jp\"
                replot

                set output '$outdir/$outputfile'
                replot
                quit
                " > $plotfile

                gnuplot < $plotfile> /dev/null
            fi
        fi

        let CTR=CTR+1
    done

    let dj=dj+1
    CTR=1
done

echo "Date: $(date)
Input file: $origfile
number of loops: $iter_count
Max=$MAX; Maxdj=$MAXdj
">$metafile
